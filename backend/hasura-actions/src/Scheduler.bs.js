// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Decco = require("decco/src/Decco.bs.js");
var Fetch = require("bs-fetch/src/Fetch.bs.js");
var Query = require("./Query.bs.js");
var BsCron = require("bs-cron/src/BsCron.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Float = require("bs-platform/lib/js/belt_Float.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var PaymentStreamManager = require("./PaymentStreamManager.bs.js");

function makePaymentRequest_encode(v) {
  return Js_dict.fromArray([
              [
                "amount",
                Decco.stringToJson(v.amount)
              ],
              [
                "identifier",
                Decco.optionToJson(Decco.stringToJson, v.identifier)
              ]
            ]);
}

function makePayment(recipientAddress, amount) {
  console.log("making payment");
  var requestString = "http://raiden1:5001/api/v1/payments/0xC563388e2e2fdD422166eD5E76971D11eD37A466/" + recipientAddress;
  console.log(requestString, amount);
  return fetch(requestString, Fetch.RequestInit.make(/* Post */2, {
                        "Content-Type": "application/json"
                      }, Caml_option.some(JSON.stringify(makePaymentRequest_encode({
                                    amount: amount,
                                    identifier: undefined
                                  }))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              console.log("THE RESULT:", json);
              
            });
}

function getTimestamp(date) {
  return date.getTime() / 1000.0 | 0;
}

function fromTimeStampToDate(timestamp) {
  return new Date(timestamp * 1000.0);
}

function getCurrentTimestamp(param) {
  return getTimestamp(new Date());
}

function startProcess(param) {
  var date = new Date();
  console.log("start date:", date);
  var now = getTimestamp(new Date());
  console.log("start timestamp:", now);
  var job = BsCron.CronJob.make({
        NAME: "CronString",
        VAL: "* * * * *"
      }, (function (param) {
          console.log("printing every minute");
          var now = getTimestamp(new Date());
          console.log("timestamp:", now);
          Curry._6(PaymentStreamManager.gqlClient.reason_query, {
                  query: Query.GetStreamData.query,
                  Raw: Query.GetStreamData.Raw,
                  parse: Query.GetStreamData.parse,
                  serialize: Query.GetStreamData.serialize,
                  serializeVariables: Query.GetStreamData.serializeVariables
                }, undefined, undefined, undefined, undefined, undefined).then(function (result) {
                if (result.TAG === /* Ok */0) {
                  var streams = result._0.data.streams;
                  console.log("wyn success: ", streams);
                  Belt_Array.map(streams, (function (stream) {
                          var userId = stream.id;
                          var startPayment = Belt_Float.fromString(stream.startPayment);
                          var nextPayment = Belt_Float.fromString(stream.nextPayment);
                          var interval = stream.interval;
                          var numberOfPayments = stream.numberOfPayments;
                          var numberOfPaymentsMade = stream.numberOfPaymentsMade;
                          if (startPayment === undefined) {
                            return ;
                          }
                          var currentPayment = startPayment + 60.0 * numberOfPaymentsMade + 60.0;
                          if (!Caml_obj.caml_greaterequal(currentPayment, nextPayment)) {
                            return ;
                          }
                          if (numberOfPayments === (numberOfPaymentsMade + 1 | 0)) {
                            Curry.app(PaymentStreamManager.gqlClient.reason_mutate, [
                                    {
                                      query: Query.CloseStreamEntry.query,
                                      Raw: Query.CloseStreamEntry.Raw,
                                      parse: Query.CloseStreamEntry.parse,
                                      serialize: Query.CloseStreamEntry.serialize,
                                      serializeVariables: Query.CloseStreamEntry.serializeVariables
                                    },
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    Query.CloseStreamEntry.makeVariables(userId, numberOfPayments, "CLOSED", undefined)
                                  ]).then(function (result) {
                                  if (result.TAG === /* Ok */0) {
                                    console.log("success close entry: CLOSED");
                                    return ;
                                  }
                                  console.log("error close entry: ", result._0);
                                  
                                });
                            return ;
                          }
                          var newPaymentsMade = numberOfPaymentsMade + 1 | 0;
                          var newNextPayment = currentPayment + 60.0 * interval;
                          Curry.app(PaymentStreamManager.gqlClient.reason_mutate, [
                                  {
                                    query: Query.UpdateStreamEntry.query,
                                    Raw: Query.UpdateStreamEntry.Raw,
                                    parse: Query.UpdateStreamEntry.parse,
                                    serialize: Query.UpdateStreamEntry.serialize,
                                    serializeVariables: Query.UpdateStreamEntry.serializeVariables
                                  },
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  Query.UpdateStreamEntry.makeVariables(userId, newPaymentsMade, String(newNextPayment), undefined)
                                ]).then(function (result) {
                                if (result.TAG === /* Ok */0) {
                                  console.log("success payment made: ", newPaymentsMade, newNextPayment);
                                  return ;
                                }
                                console.log("error payment made: ", result._0);
                                
                              });
                          
                        }));
                  return ;
                }
                console.log("wyn error: ", result._0);
                
              });
          
        }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
  job.start();
  
}

exports.makePaymentRequest_encode = makePaymentRequest_encode;
exports.makePayment = makePayment;
exports.getTimestamp = getTimestamp;
exports.fromTimeStampToDate = fromTimeStampToDate;
exports.getCurrentTimestamp = getCurrentTimestamp;
exports.startProcess = startProcess;
/* Query Not a pure module */
