// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Decco = require("decco/src/Decco.bs.js");
var Query = require("./Query.bs.js");
var Serbet = require("serbet/src/Serbet.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ClientConfig = require("./gql/ClientConfig.bs.js");

function recipientData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var recipient = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "recipient"), null));
  if (recipient.TAG === /* Ok */0) {
    var addressTokenStream = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "addressTokenStream"), null));
    if (addressTokenStream.TAG === /* Ok */0) {
      var lengthOfPayment = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "lengthOfPayment"), null));
      if (lengthOfPayment.TAG === /* Ok */0) {
        var interval = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "interval"), null));
        if (interval.TAG === /* Ok */0) {
          var rate = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rate"), null));
          if (rate.TAG === /* Ok */0) {
            var deposit = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deposit"), null));
            if (deposit.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        recipient: recipient._0,
                        addressTokenStream: addressTokenStream._0,
                        lengthOfPayment: lengthOfPayment._0,
                        interval: interval._0,
                        rate: rate._0,
                        deposit: deposit._0
                      }
                    };
            }
            var e = deposit._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".deposit" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = rate._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".rate" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = interval._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".interval" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = lengthOfPayment._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".lengthOfPayment" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = addressTokenStream._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".addressTokenStream" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = recipient._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".recipient" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function body_in_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var input = recipientData_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "input"), null));
  if (input.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              input: input._0
            }
          };
  }
  var e = input._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".input" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function body_out_encode(v) {
  return Js_dict.fromArray([
              [
                "success",
                Decco.boolToJson(v.success)
              ],
              [
                "error",
                Decco.optionToJson(Decco.stringToJson, v.error)
              ]
            ]);
}

var gqlClient = ClientConfig.createInstance({
      "x-hasura-admin-secret": "testing"
    }, "http://graphql-engine:8080/v1/graphql", undefined);

var createStream = Serbet.endpoint(undefined, {
      path: "/create-stream",
      verb: /* POST */1,
      handler: (function (req) {
          var __x = Curry._1(req.requireBody, body_in_decode);
          return __x.then(function (param) {
                      var match = param.input;
                      console.log("TODO: we must still make the deposit here " + match.deposit);
                      var __x = Curry.app(gqlClient.reason_mutate, [
                            {
                              query: Query.CreatePaymentStream.query,
                              Raw: Query.CreatePaymentStream.Raw,
                              parse: Query.CreatePaymentStream.parse,
                              serialize: Query.CreatePaymentStream.serialize,
                              serializeVariables: Query.CreatePaymentStream.serializeVariables
                            },
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            undefined,
                            Query.CreatePaymentStream.makeVariables(match.rate, match.interval, match.lengthOfPayment, match.recipient, 1, "TODO: Pending DepositCreation", match.addressTokenStream, undefined)
                          ]);
                      return __x.then(function (result) {
                                  var tmp;
                                  tmp = result.TAG === /* Ok */0 ? ({
                                        success: true,
                                        error: undefined
                                      }) : ({
                                        success: false,
                                        error: result._0.message
                                      });
                                  return Promise.resolve({
                                              TAG: /* OkJson */4,
                                              _0: body_out_encode(tmp)
                                            });
                                });
                    });
        })
    });

var ApolloQueryResult;

exports.ApolloQueryResult = ApolloQueryResult;
exports.recipientData_decode = recipientData_decode;
exports.body_in_decode = body_in_decode;
exports.body_out_encode = body_out_encode;
exports.gqlClient = gqlClient;
exports.createStream = createStream;
/* gqlClient Not a pure module */
