// Generated by ReScript, PLEASE EDIT WITH CARE

import * as GqlConverters$FlowsUserApp from "./lib/GqlConverters.bs.js";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as ApolloClient__React_Hooks_UseMutation from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query ViewPaymentsStreamsWithAddress($address: String!)  {
    streams(where: {recipient: {_eq: $address}})  {
      __typename
      id
      amount
      interval
      numberOfPayments
      numberOfPaymentsMade
      recipient
      state
      tokenAddress
      startPayment
      nextPayment
      lastPayment
    }
  }
`);

function parse(value) {
  var value$1 = value.streams;
  return {
          streams: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        id: value.id,
                        amount: GqlConverters$FlowsUserApp.$$BigInt.parse(value.amount),
                        interval: GqlConverters$FlowsUserApp.IntToBigInt.parse(value.interval),
                        numberOfPayments: GqlConverters$FlowsUserApp.IntToBigInt.parse(value.numberOfPayments),
                        numberOfPaymentsMade: GqlConverters$FlowsUserApp.IntToBigInt.parse(value.numberOfPaymentsMade),
                        recipient: value.recipient,
                        state: value.state,
                        tokenAddress: value.tokenAddress,
                        startPayment: GqlConverters$FlowsUserApp.IntToBigInt.parse(value.startPayment),
                        nextPayment: GqlConverters$FlowsUserApp.IntToBigInt.parse(value.nextPayment),
                        lastPayment: value.lastPayment
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.streams;
  var streams = value$1.map(function (value) {
        var value$1 = value.lastPayment;
        var value$2 = value.nextPayment;
        var value$3 = GqlConverters$FlowsUserApp.IntToBigInt.serialize(value$2);
        var value$4 = value.startPayment;
        var value$5 = GqlConverters$FlowsUserApp.IntToBigInt.serialize(value$4);
        var value$6 = value.tokenAddress;
        var value$7 = value.state;
        var value$8 = value.recipient;
        var value$9 = value.numberOfPaymentsMade;
        var value$10 = GqlConverters$FlowsUserApp.IntToBigInt.serialize(value$9);
        var value$11 = value.numberOfPayments;
        var value$12 = GqlConverters$FlowsUserApp.IntToBigInt.serialize(value$11);
        var value$13 = value.interval;
        var value$14 = GqlConverters$FlowsUserApp.IntToBigInt.serialize(value$13);
        var value$15 = value.amount;
        var value$16 = GqlConverters$FlowsUserApp.$$BigInt.serialize(value$15);
        var value$17 = value.id;
        var value$18 = value.__typename;
        return {
                __typename: value$18,
                id: value$17,
                amount: value$16,
                interval: value$14,
                numberOfPayments: value$12,
                numberOfPaymentsMade: value$10,
                recipient: value$8,
                state: value$7,
                tokenAddress: value$6,
                startPayment: value$5,
                nextPayment: value$3,
                lastPayment: value$1
              };
      });
  return {
          streams: streams
        };
}

function serializeVariables(inp) {
  return {
          address: inp.address
        };
}

function makeVariables(address, param) {
  return {
          address: address
        };
}

var ViewPaymentsStreamsWithAddress_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var ViewPaymentsStreamsWithAddress_refetchQueryDescription = include.refetchQueryDescription;

var ViewPaymentsStreamsWithAddress_use = include.use;

var ViewPaymentsStreamsWithAddress_useLazy = include.useLazy;

var ViewPaymentsStreamsWithAddress_useLazyWithVariables = include.useLazyWithVariables;

var ViewPaymentsStreamsWithAddress = {
  ViewPaymentsStreamsWithAddress_inner: ViewPaymentsStreamsWithAddress_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: ViewPaymentsStreamsWithAddress_refetchQueryDescription,
  use: ViewPaymentsStreamsWithAddress_use,
  useLazy: ViewPaymentsStreamsWithAddress_useLazy,
  useLazyWithVariables: ViewPaymentsStreamsWithAddress_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  mutation CreatePaymentStream($amount: String!, $interval: Int!, $numberOfPayments: Int!, $recipient: String!, $startPayment: Int!, $state: String, $tokenAddress: String!)  {
    insert_streams_one(object: {amount: $amount, interval: $interval, numberOfPayments: $numberOfPayments, numberOfPaymentsMade: 0, recipient: $recipient, startPayment: $startPayment, state: $state, tokenAddress: $tokenAddress})  {
      __typename
      id
    }
  }
`);

function parse$1(value) {
  var value$1 = value.insert_streams_one;
  return {
          insert_streams_one: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id
              }) : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.insert_streams_one;
  var insert_streams_one;
  if (value$1 !== undefined) {
    var value$2 = value$1.id;
    var value$3 = value$1.__typename;
    insert_streams_one = {
      __typename: value$3,
      id: value$2
    };
  } else {
    insert_streams_one = null;
  }
  return {
          insert_streams_one: insert_streams_one
        };
}

function serializeVariables$1(inp) {
  var a = inp.state;
  return {
          amount: inp.amount,
          interval: inp.interval,
          numberOfPayments: inp.numberOfPayments,
          recipient: inp.recipient,
          startPayment: inp.startPayment,
          state: a !== undefined ? a : undefined,
          tokenAddress: inp.tokenAddress
        };
}

function makeVariables$1(amount, interval, numberOfPayments, recipient, startPayment, state, tokenAddress, param) {
  return {
          amount: amount,
          interval: interval,
          numberOfPayments: numberOfPayments,
          recipient: recipient,
          startPayment: startPayment,
          state: state,
          tokenAddress: tokenAddress
        };
}

var CreatePaymentStream_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var CreatePaymentStream_use = include$1.use;

var CreatePaymentStream_useWithVariables = include$1.useWithVariables;

var CreatePaymentStream = {
  CreatePaymentStream_inner: CreatePaymentStream_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  use: CreatePaymentStream_use,
  useWithVariables: CreatePaymentStream_useWithVariables
};

export {
  ViewPaymentsStreamsWithAddress ,
  CreatePaymentStream ,
  
}
/* query Not a pure module */
