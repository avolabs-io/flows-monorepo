// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "bs-platform/lib/es6/belt_Int.js";
import * as Formality from "re-formality/src/Formality.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Form$FlowsUserApp from "./components/Form.bs.js";
import * as Ethers$FlowsUserApp from "./lib/Ethers/Ethers.bs.js";
import * as Queries$FlowsUserApp from "./Queries.bs.js";
import * as Formality__ReactUpdate from "re-formality/src/Formality__ReactUpdate.bs.js";

function validateInt(interval) {
  var intervalOpt = Belt_Int.fromString(interval);
  if (intervalOpt !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: intervalOpt
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "Must be a valid int >:("
          };
  }
}

function validateAddress(address) {
  var a = Ethers$FlowsUserApp.Utils.getAddress(address);
  if (a !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Ethers$FlowsUserApp.Utils.ethAdrToStr(Caml_option.valFromOption(a))
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "Must be a valid address"
          };
  }
}

var validators_startPayment = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return validateInt(param.startPayment);
    })
};

var validators_tokenAddress = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return validateAddress(param.tokenAddress);
    })
};

var validators_numberOfPayments = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return validateInt(param.numberOfPayments);
    })
};

var validators_interval = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return validateInt(param.interval);
    })
};

var validators_amount = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      var amount = param.amount;
      if (amount.length > 0) {
        return {
                TAG: /* Ok */0,
                _0: amount
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Amount must have a length greater than zero!"
              };
      }
    })
};

var validators_userAddress = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return validateAddress(param.userAddress);
    })
};

var validators = {
  startPayment: validators_startPayment,
  tokenAddress: validators_tokenAddress,
  numberOfPayments: validators_numberOfPayments,
  interval: validators_interval,
  amount: validators_amount,
  userAddress: validators_userAddress
};

function initialFieldsStatuses(_input) {
  return {
          startPayment: /* Pristine */0,
          tokenAddress: /* Pristine */0,
          numberOfPayments: /* Pristine */0,
          interval: /* Pristine */0,
          amount: /* Pristine */0,
          userAddress: /* Pristine */0
        };
}

function initialState(input) {
  return {
          input: input,
          fieldsStatuses: initialFieldsStatuses(input),
          collectionsStatuses: undefined,
          formStatus: /* Editing */0,
          submissionStatus: /* NeverSubmitted */0
        };
}

function validateForm(input, validators, fieldsStatuses) {
  var match = fieldsStatuses.startPayment;
  var match_0 = match ? match._0 : Curry._1(validators.startPayment.validate, input);
  var match$1 = fieldsStatuses.tokenAddress;
  var match_0$1 = match$1 ? match$1._0 : Curry._1(validators.tokenAddress.validate, input);
  var match$2 = fieldsStatuses.numberOfPayments;
  var match_0$2 = match$2 ? match$2._0 : Curry._1(validators.numberOfPayments.validate, input);
  var match$3 = fieldsStatuses.interval;
  var match_0$3 = match$3 ? match$3._0 : Curry._1(validators.interval.validate, input);
  var match$4 = fieldsStatuses.amount;
  var match_0$4 = match$4 ? match$4._0 : Curry._1(validators.amount.validate, input);
  var match$5 = fieldsStatuses.userAddress;
  var match_0$5 = match$5 ? match$5._0 : Curry._1(validators.userAddress.validate, input);
  var startPaymentResult = match_0;
  var startPaymentResult$1;
  if (startPaymentResult.TAG === /* Ok */0) {
    var tokenAddressResult = match_0$1;
    if (tokenAddressResult.TAG === /* Ok */0) {
      var numberOfPaymentsResult = match_0$2;
      if (numberOfPaymentsResult.TAG === /* Ok */0) {
        var intervalResult = match_0$3;
        if (intervalResult.TAG === /* Ok */0) {
          var amountResult = match_0$4;
          if (amountResult.TAG === /* Ok */0) {
            var userAddressResult = match_0$5;
            if (userAddressResult.TAG === /* Ok */0) {
              return {
                      TAG: /* Valid */0,
                      output: {
                        userAddress: userAddressResult._0,
                        amount: amountResult._0,
                        interval: intervalResult._0,
                        numberOfPayments: numberOfPaymentsResult._0,
                        tokenAddress: tokenAddressResult._0,
                        startPayment: startPaymentResult._0
                      },
                      fieldsStatuses: {
                        startPayment: /* Dirty */{
                          _0: startPaymentResult,
                          _1: /* Shown */0
                        },
                        tokenAddress: /* Dirty */{
                          _0: tokenAddressResult,
                          _1: /* Shown */0
                        },
                        numberOfPayments: /* Dirty */{
                          _0: numberOfPaymentsResult,
                          _1: /* Shown */0
                        },
                        interval: /* Dirty */{
                          _0: intervalResult,
                          _1: /* Shown */0
                        },
                        amount: /* Dirty */{
                          _0: amountResult,
                          _1: /* Shown */0
                        },
                        userAddress: /* Dirty */{
                          _0: userAddressResult,
                          _1: /* Shown */0
                        }
                      },
                      collectionsStatuses: undefined
                    };
            }
            startPaymentResult$1 = startPaymentResult;
          } else {
            startPaymentResult$1 = startPaymentResult;
          }
        } else {
          startPaymentResult$1 = startPaymentResult;
        }
      } else {
        startPaymentResult$1 = startPaymentResult;
      }
    } else {
      startPaymentResult$1 = startPaymentResult;
    }
  } else {
    startPaymentResult$1 = startPaymentResult;
  }
  return {
          TAG: /* Invalid */1,
          fieldsStatuses: {
            startPayment: /* Dirty */{
              _0: startPaymentResult$1,
              _1: /* Shown */0
            },
            tokenAddress: /* Dirty */{
              _0: match_0$1,
              _1: /* Shown */0
            },
            numberOfPayments: /* Dirty */{
              _0: match_0$2,
              _1: /* Shown */0
            },
            interval: /* Dirty */{
              _0: match_0$3,
              _1: /* Shown */0
            },
            amount: /* Dirty */{
              _0: match_0$4,
              _1: /* Shown */0
            },
            userAddress: /* Dirty */{
              _0: match_0$5,
              _1: /* Shown */0
            }
          },
          collectionsStatuses: undefined
        };
}

function useForm(initialInput, onSubmit) {
  var memoizedInitialState = React.useMemo((function () {
          return initialState(initialInput);
        }), [initialInput]);
  var match = Formality__ReactUpdate.useReducer(memoizedInitialState, (function (state, action) {
          if (typeof action === "number") {
            switch (action) {
              case /* BlurStartPaymentField */0 :
                  var result = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.startPayment, validators_startPayment, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: status,
                                  tokenAddress: init.tokenAddress,
                                  numberOfPayments: init.numberOfPayments,
                                  interval: init.interval,
                                  amount: init.amount,
                                  userAddress: init.userAddress
                                };
                        }));
                  if (result !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurTokenAddressField */1 :
                  var result$1 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.tokenAddress, validators_tokenAddress, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: init.startPayment,
                                  tokenAddress: status,
                                  numberOfPayments: init.numberOfPayments,
                                  interval: init.interval,
                                  amount: init.amount,
                                  userAddress: init.userAddress
                                };
                        }));
                  if (result$1 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$1,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurNumberOfPaymentsField */2 :
                  var result$2 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.numberOfPayments, validators_numberOfPayments, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: init.startPayment,
                                  tokenAddress: init.tokenAddress,
                                  numberOfPayments: status,
                                  interval: init.interval,
                                  amount: init.amount,
                                  userAddress: init.userAddress
                                };
                        }));
                  if (result$2 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$2,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurIntervalField */3 :
                  var result$3 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.interval, validators_interval, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: init.startPayment,
                                  tokenAddress: init.tokenAddress,
                                  numberOfPayments: init.numberOfPayments,
                                  interval: status,
                                  amount: init.amount,
                                  userAddress: init.userAddress
                                };
                        }));
                  if (result$3 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$3,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurAmountField */4 :
                  var result$4 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.amount, validators_amount, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: init.startPayment,
                                  tokenAddress: init.tokenAddress,
                                  numberOfPayments: init.numberOfPayments,
                                  interval: init.interval,
                                  amount: status,
                                  userAddress: init.userAddress
                                };
                        }));
                  if (result$4 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$4,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurUserAddressField */5 :
                  var result$5 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.userAddress, validators_userAddress, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  startPayment: init.startPayment,
                                  tokenAddress: init.tokenAddress,
                                  numberOfPayments: init.numberOfPayments,
                                  interval: init.interval,
                                  amount: init.amount,
                                  userAddress: status
                                };
                        }));
                  if (result$5 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$5,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* Submit */6 :
                  var match = state.formStatus;
                  if (typeof match !== "number" && match.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  var match$1 = validateForm(state.input, validators, state.fieldsStatuses);
                  if (match$1.TAG !== /* Valid */0) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: match$1.fieldsStatuses,
                              collectionsStatuses: match$1.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: /* AttemptedToSubmit */1
                            }
                          };
                  }
                  var output = match$1.output;
                  var error = state.formStatus;
                  var tmp;
                  tmp = typeof error === "number" || error.TAG !== /* SubmissionFailed */1 ? undefined : Caml_option.some(error._0);
                  return {
                          TAG: /* UpdateWithSideEffects */1,
                          _0: {
                            input: state.input,
                            fieldsStatuses: match$1.fieldsStatuses,
                            collectionsStatuses: match$1.collectionsStatuses,
                            formStatus: {
                              TAG: /* Submitting */0,
                              _0: tmp
                            },
                            submissionStatus: /* AttemptedToSubmit */1
                          },
                          _1: (function (param) {
                              var dispatch = param.dispatch;
                              return Curry._2(onSubmit, output, {
                                          notifyOnSuccess: (function (input) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* SetSubmittedStatus */6,
                                                          _0: input
                                                        });
                                            }),
                                          notifyOnFailure: (function (error) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* SetSubmissionFailedStatus */7,
                                                          _0: error
                                                        });
                                            }),
                                          reset: (function (param) {
                                              return Curry._1(dispatch, /* Reset */9);
                                            }),
                                          dismissSubmissionResult: (function (param) {
                                              return Curry._1(dispatch, /* DismissSubmissionResult */8);
                                            })
                                        });
                            })
                        };
                  break;
              case /* DismissSubmissionError */7 :
                  var match$2 = state.formStatus;
                  if (typeof match$2 === "number" || match$2.TAG !== /* SubmissionFailed */1) {
                    return /* NoUpdate */0;
                  } else {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  }
              case /* DismissSubmissionResult */8 :
                  var match$3 = state.formStatus;
                  if (typeof match$3 === "number") {
                    if (match$3 === /* Editing */0) {
                      return /* NoUpdate */0;
                    }
                    
                  } else if (match$3.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: /* Editing */0,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* Reset */9 :
                  return {
                          TAG: /* Update */0,
                          _0: initialState(initialInput)
                        };
              
            }
          } else {
            switch (action.TAG | 0) {
              case /* UpdateStartPaymentField */0 :
                  var nextInput = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput, state.fieldsStatuses.startPayment, state.submissionStatus, validators_startPayment, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: status,
                                            tokenAddress: init.tokenAddress,
                                            numberOfPayments: init.numberOfPayments,
                                            interval: init.interval,
                                            amount: init.amount,
                                            userAddress: init.userAddress
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* UpdateTokenAddressField */1 :
                  var nextInput$1 = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput$1,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$1, state.fieldsStatuses.tokenAddress, state.submissionStatus, validators_tokenAddress, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: init.startPayment,
                                            tokenAddress: status,
                                            numberOfPayments: init.numberOfPayments,
                                            interval: init.interval,
                                            amount: init.amount,
                                            userAddress: init.userAddress
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* UpdateNumberOfPaymentsField */2 :
                  var nextInput$2 = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput$2,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$2, state.fieldsStatuses.numberOfPayments, state.submissionStatus, validators_numberOfPayments, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: init.startPayment,
                                            tokenAddress: init.tokenAddress,
                                            numberOfPayments: status,
                                            interval: init.interval,
                                            amount: init.amount,
                                            userAddress: init.userAddress
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* UpdateIntervalField */3 :
                  var nextInput$3 = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput$3,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$3, state.fieldsStatuses.interval, state.submissionStatus, validators_interval, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: init.startPayment,
                                            tokenAddress: init.tokenAddress,
                                            numberOfPayments: init.numberOfPayments,
                                            interval: status,
                                            amount: init.amount,
                                            userAddress: init.userAddress
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* UpdateAmountField */4 :
                  var nextInput$4 = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput$4,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$4, state.fieldsStatuses.amount, state.submissionStatus, validators_amount, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: init.startPayment,
                                            tokenAddress: init.tokenAddress,
                                            numberOfPayments: init.numberOfPayments,
                                            interval: init.interval,
                                            amount: status,
                                            userAddress: init.userAddress
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* UpdateUserAddressField */5 :
                  var nextInput$5 = Curry._1(action._0, state.input);
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: nextInput$5,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$5, state.fieldsStatuses.userAddress, state.submissionStatus, validators_userAddress, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            startPayment: init.startPayment,
                                            tokenAddress: init.tokenAddress,
                                            numberOfPayments: init.numberOfPayments,
                                            interval: init.interval,
                                            amount: init.amount,
                                            userAddress: status
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* SetSubmittedStatus */6 :
                  var input = action._0;
                  if (input !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: input,
                              fieldsStatuses: initialFieldsStatuses(input),
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: initialFieldsStatuses(state.input),
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            }
                          };
                  }
              case /* SetSubmissionFailedStatus */7 :
                  return {
                          TAG: /* Update */0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: {
                              TAG: /* SubmissionFailed */1,
                              _0: action._0
                            },
                            submissionStatus: state.submissionStatus
                          }
                        };
              case /* MapSubmissionError */8 :
                  var map = action._0;
                  var error$1 = state.formStatus;
                  if (typeof error$1 === "number") {
                    return /* NoUpdate */0;
                  }
                  if (error$1.TAG !== /* Submitting */0) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: /* SubmissionFailed */1,
                                _0: Curry._1(map, error$1._0)
                              },
                              submissionStatus: state.submissionStatus
                            }
                          };
                  }
                  var error$2 = error$1._0;
                  if (error$2 !== undefined) {
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: /* Submitting */0,
                                _0: Caml_option.some(Curry._1(map, Caml_option.valFromOption(error$2)))
                              },
                              submissionStatus: state.submissionStatus
                            }
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              
            }
          }
        }));
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.formStatus;
  var tmp;
  tmp = typeof match$1 === "number" || match$1.TAG !== /* Submitting */0 ? false : true;
  return {
          updateStartPayment: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateStartPaymentField */0,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          updateTokenAddress: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateTokenAddressField */1,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          updateNumberOfPayments: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateNumberOfPaymentsField */2,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          updateInterval: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateIntervalField */3,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          updateAmount: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateAmountField */4,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          updateUserAddress: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: /* UpdateUserAddressField */5,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            })
                        });
            }),
          blurStartPayment: (function (param) {
              return Curry._1(dispatch, /* BlurStartPaymentField */0);
            }),
          blurTokenAddress: (function (param) {
              return Curry._1(dispatch, /* BlurTokenAddressField */1);
            }),
          blurNumberOfPayments: (function (param) {
              return Curry._1(dispatch, /* BlurNumberOfPaymentsField */2);
            }),
          blurInterval: (function (param) {
              return Curry._1(dispatch, /* BlurIntervalField */3);
            }),
          blurAmount: (function (param) {
              return Curry._1(dispatch, /* BlurAmountField */4);
            }),
          blurUserAddress: (function (param) {
              return Curry._1(dispatch, /* BlurUserAddressField */5);
            }),
          startPaymentResult: Formality.exposeFieldResult(state.fieldsStatuses.startPayment),
          tokenAddressResult: Formality.exposeFieldResult(state.fieldsStatuses.tokenAddress),
          numberOfPaymentsResult: Formality.exposeFieldResult(state.fieldsStatuses.numberOfPayments),
          intervalResult: Formality.exposeFieldResult(state.fieldsStatuses.interval),
          amountResult: Formality.exposeFieldResult(state.fieldsStatuses.amount),
          userAddressResult: Formality.exposeFieldResult(state.fieldsStatuses.userAddress),
          input: state.input,
          status: state.formStatus,
          dirty: (function (param) {
              var match = state.fieldsStatuses;
              if (match.startPayment || match.tokenAddress || match.numberOfPayments || match.interval || match.amount || match.userAddress) {
                return true;
              } else {
                return false;
              }
            }),
          valid: (function (param) {
              var match = validateForm(state.input, validators, state.fieldsStatuses);
              if (match.TAG === /* Valid */0) {
                return true;
              } else {
                return false;
              }
            }),
          submitting: tmp,
          submit: (function (param) {
              return Curry._1(dispatch, /* Submit */6);
            }),
          dismissSubmissionError: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionError */7);
            }),
          dismissSubmissionResult: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionResult */8);
            }),
          mapSubmissionError: (function (map) {
              return Curry._1(dispatch, {
                          TAG: /* MapSubmissionError */8,
                          _0: map
                        });
            }),
          reset: (function (param) {
              return Curry._1(dispatch, /* Reset */9);
            })
        };
}

var CreatePaymentStreamForm = {
  validators: validators,
  initialFieldsStatuses: initialFieldsStatuses,
  initialCollectionsStatuses: undefined,
  initialState: initialState,
  validateForm: validateForm,
  useForm: useForm
};

var initialInput = {
  userAddress: "",
  amount: "",
  interval: "",
  numberOfPayments: "",
  tokenAddress: "",
  startPayment: ""
};

function CreatePayment(Props) {
  var match = Curry.app(Queries$FlowsUserApp.CreatePaymentStream.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var createProfileMutate = match[0];
  var form = useForm(initialInput, (function (param, _form) {
          Curry._8(createProfileMutate, undefined, undefined, undefined, undefined, undefined, undefined, undefined, {
                amount: param.amount,
                interval: param.interval,
                numberOfPayments: param.numberOfPayments,
                recipient: param.userAddress,
                startPayment: param.startPayment,
                tokenAddress: param.tokenAddress
              });
          
        }));
  return React.createElement(Form$FlowsUserApp.make, {
              className: "",
              onSubmit: (function (param) {
                  return Curry._1(form.submit, undefined);
                }),
              children: null
            }, React.createElement("h2", undefined, "Create Payment"), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "address",
                  title: "Recipient: ",
                  value: form.input.userAddress,
                  blur: form.blurUserAddress,
                  updateCurried: Curry._1(form.updateUserAddress, (function (input, value) {
                          return {
                                  userAddress: value,
                                  amount: input.amount,
                                  interval: input.interval,
                                  numberOfPayments: input.numberOfPayments,
                                  tokenAddress: input.tokenAddress,
                                  startPayment: input.startPayment
                                };
                        })),
                  result: form.userAddressResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "amount",
                  title: "Amount: ",
                  value: form.input.amount,
                  blur: form.blurAmount,
                  updateCurried: Curry._1(form.updateAmount, (function (input, value) {
                          return {
                                  userAddress: input.userAddress,
                                  amount: value,
                                  interval: input.interval,
                                  numberOfPayments: input.numberOfPayments,
                                  tokenAddress: input.tokenAddress,
                                  startPayment: input.startPayment
                                };
                        })),
                  result: form.amountResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "interval",
                  title: "Interval: ",
                  value: form.input.interval,
                  blur: form.blurInterval,
                  updateCurried: Curry._1(form.updateInterval, (function (input, value) {
                          return {
                                  userAddress: input.userAddress,
                                  amount: input.amount,
                                  interval: value,
                                  numberOfPayments: input.numberOfPayments,
                                  tokenAddress: input.tokenAddress,
                                  startPayment: input.startPayment
                                };
                        })),
                  result: form.intervalResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "numberPayments",
                  title: "Number of payments",
                  value: form.input.numberOfPayments,
                  blur: form.blurNumberOfPayments,
                  updateCurried: Curry._1(form.updateNumberOfPayments, (function (input, value) {
                          return {
                                  userAddress: input.userAddress,
                                  amount: input.amount,
                                  interval: input.interval,
                                  numberOfPayments: value,
                                  tokenAddress: input.tokenAddress,
                                  startPayment: input.startPayment
                                };
                        })),
                  result: form.numberOfPaymentsResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "tokenAddress",
                  title: "Token Address",
                  value: form.input.tokenAddress,
                  blur: form.blurTokenAddress,
                  updateCurried: Curry._1(form.updateTokenAddress, (function (input, value) {
                          return {
                                  userAddress: input.userAddress,
                                  amount: input.amount,
                                  interval: input.interval,
                                  numberOfPayments: input.numberOfPayments,
                                  tokenAddress: value,
                                  startPayment: input.startPayment
                                };
                        })),
                  result: form.tokenAddressResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement(Form$FlowsUserApp.Input.make, {
                  label: "startPayment",
                  title: "Start Payment",
                  value: form.input.startPayment,
                  blur: form.blurStartPayment,
                  updateCurried: Curry._1(form.updateStartPayment, (function (input, value) {
                          return {
                                  userAddress: input.userAddress,
                                  amount: input.amount,
                                  interval: input.interval,
                                  numberOfPayments: input.numberOfPayments,
                                  tokenAddress: input.tokenAddress,
                                  startPayment: value
                                };
                        })),
                  result: form.startPaymentResult,
                  disabled: form.submitting
                }), React.createElement("br", undefined), React.createElement("button", undefined, "CREATE STREAM"));
}

var make = CreatePayment;

export {
  validateInt ,
  validateAddress ,
  CreatePaymentStreamForm ,
  initialInput ,
  make ,
  
}
/* react Not a pure module */
