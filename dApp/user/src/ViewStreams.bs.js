// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Ethers$FlowsUserApp from "./lib/Ethers/Ethers.bs.js";
import * as Queries$FlowsUserApp from "./Queries.bs.js";
import * as RootProvider$FlowsUserApp from "./lib/Old/RootProvider.bs.js";

function ViewStreams$StreamsTable(Props) {
  var streamsQuery = Props.streamsQuery;
  var match = React.useState(function () {
        return false;
      });
  var setViewingStream = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setCurrentStream = match$1[1];
  var currentStream = match$1[0];
  var tmp;
  if (match[0]) {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("h1", undefined, "Viewing Stream"), currentStream !== undefined ? String(currentStream.recipient) : null, React.createElement("button", {
              onClick: (function (param) {
                  return Curry._1(setViewingStream, (function (param) {
                                return false;
                              }));
                })
            }, "BACK"));
  } else {
    var match$2 = streamsQuery.data;
    var exit = 0;
    if (match$2 !== undefined || !streamsQuery.loading) {
      exit = 1;
    } else {
      tmp = React.createElement("p", undefined, "Loading");
    }
    if (exit === 1) {
      var error = streamsQuery.error;
      if (error !== undefined) {
        console.log(error);
        tmp = React.createElement("p", undefined, "Data is loaded");
      } else {
        tmp = match$2 !== undefined ? React.createElement("table", {
                id: "streams"
              }, React.createElement("tbody", undefined, Belt_Array.map(match$2.streams, (function (stream) {
                          return React.createElement("tr", {
                                      key: String(stream.id)
                                    }, React.createElement("td", undefined, "Stream " + String(stream.id)), React.createElement("td", undefined, React.createElement("button", {
                                              onClick: (function (param) {
                                                  Curry._1(setViewingStream, (function (param) {
                                                          return true;
                                                        }));
                                                  return Curry._1(setCurrentStream, (function (param) {
                                                                return stream;
                                                              }));
                                                })
                                            }, "View More Info")));
                        })))) : React.createElement("p", undefined, "Error loading data");
      }
    }
    
  }
  return React.createElement("div", undefined, tmp);
}

var StreamsTable = {
  make: ViewStreams$StreamsTable
};

function ViewStreams(Props) {
  var user = RootProvider$FlowsUserApp.useCurrentUserExn(undefined);
  var match = React.useState(function () {
        return true;
      });
  var setIsOpen = match[1];
  var isOpen = match[0];
  var viewOpenStreamsQuery = Curry.app(Queries$FlowsUserApp.ViewPaymentsStreamsWithAddress.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          address: Ethers$FlowsUserApp.Utils.ethAdrToStr(user),
          state: "OPEN"
        }
      ]);
  var viewClosedStreamsQuery = Curry.app(Queries$FlowsUserApp.ViewPaymentsStreamsWithAddress.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          address: Ethers$FlowsUserApp.Utils.ethAdrToStr(user),
          state: "CLOSED"
        }
      ]);
  return React.createElement(React.Fragment, undefined, React.createElement("h2", undefined, (
                  isOpen ? "OPEN" : "CLOSED"
                ) + " STREAMS"), React.createElement("button", {
                  disabled: isOpen,
                  onClick: (function (param) {
                      return Curry._1(setIsOpen, (function (param) {
                                    return true;
                                  }));
                    })
                }, "VIEW OPEN"), React.createElement("button", {
                  disabled: !isOpen,
                  onClick: (function (param) {
                      return Curry._1(setIsOpen, (function (param) {
                                    return false;
                                  }));
                    })
                }, "VIEW CLOSED"), React.createElement(ViewStreams$StreamsTable, {
                  streamsQuery: isOpen ? viewOpenStreamsQuery : viewClosedStreamsQuery
                }));
}

var make = ViewStreams;

export {
  StreamsTable ,
  make ,
  
}
/* react Not a pure module */
