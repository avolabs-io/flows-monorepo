// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Apollo$FlowsUserApp from "../../Apollo.bs.js";
import * as RootProvider$FlowsUserApp from "../Old/RootProvider.bs.js";

var context = React.createContext({
      isAuthorized: false,
      setIsAuthorized: (function (param) {
          
        })
    });

var provider = context.Provider;

function AuthProvider$AuthContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: AuthProvider$AuthContext$Provider
};

var AuthContext = {
  context: context,
  Provider: Provider
};

function getUserAuthStatus(user) {
  return Belt_Option.isSome(Apollo$FlowsUserApp.getAuthHeaders(user));
}

function AuthProvider(Props) {
  var children = Props.children;
  var user = RootProvider$FlowsUserApp.useCurrentUser(undefined);
  var match = React.useState(function () {
        return false;
      });
  var setIsAuthorized = match[1];
  React.useEffect((function () {
          Curry._1(setIsAuthorized, (function (param) {
                  return Belt_Option.isSome(Apollo$FlowsUserApp.getAuthHeaders(user));
                }));
          
        }), [user]);
  return React.createElement(AuthProvider$AuthContext$Provider, {
              value: {
                isAuthorized: match[0],
                setIsAuthorized: setIsAuthorized
              },
              children: children
            });
}

function useAuthStatus(param) {
  return React.useContext(context);
}

var make = AuthProvider;

export {
  AuthContext ,
  getUserAuthStatus ,
  make ,
  useAuthStatus ,
  
}
/* context Not a pure module */
