// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ApolloClient from "rescript-apollo-client/src/ApolloClient.bs.js";
import * as Auth$FlowsUserApp from "./lib/Auth/Auth.bs.js";
import * as ApolloClient__Link_Ws from "rescript-apollo-client/src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js";
import * as ApolloClient__Utilities from "rescript-apollo-client/src/@apollo/client/utilities/ApolloClient__Utilities.bs.js";
import * as ApolloClient__ApolloClient from "rescript-apollo-client/src/@apollo/client/ApolloClient__ApolloClient.bs.js";
import * as ReasonMLCommunity__ApolloClient from "rescript-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js";
import * as ApolloClient__Link_Http_HttpLink from "rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js";
import * as ApolloClient__SubscriptionsTransportWs from "rescript-apollo-client/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js";
import * as ApolloClient__Cache_InMemory_InMemoryCache from "rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js";

var graphqlEndpoint = "localhost:8080/v1/graphql";

var headers = {
  "x-hasura-admin-secret": "testing"
};

var httpLink = ApolloClient__Link_Http_HttpLink.make((function (param) {
        return "http://localhost:8080/v1/graphql";
      }), undefined, undefined, Caml_option.some(headers), undefined, undefined, undefined, undefined);

function makeHttpLink(user) {
  var headers = Auth$FlowsUserApp.$$Headers.makeFromOpt(user);
  return ApolloClient__Link_Http_HttpLink.make((function (param) {
                return "http://localhost:8080/v1/graphql";
              }), undefined, undefined, Caml_option.some(headers !== undefined ? headers : (function (prim) {
                      return {};
                    })), undefined, undefined, undefined, undefined);
}

var wsLink = ApolloClient__Link_Ws.WebSocketLink.make("ws://localhost:8080/v1/graphql", ApolloClient__SubscriptionsTransportWs.ClientOptions.make({
          TAG: /* ConnectionParams */0,
          _0: {
            headers: headers
          }
        }, undefined, true, undefined, undefined, undefined, undefined, undefined), undefined, undefined);

function terminatingLink(user) {
  return ReasonMLCommunity__ApolloClient.Link.split((function (param) {
                var definition = ApolloClient__Utilities.getOperationDefinition(param.query);
                if (definition !== undefined && definition.kind === "OperationDefinition") {
                  return definition.operation === "subscription";
                } else {
                  return false;
                }
              }), wsLink, makeHttpLink(user));
}

function makeClient(user) {
  return ApolloClient.make(undefined, undefined, undefined, Caml_option.some(terminatingLink(user)), ApolloClient__Cache_InMemory_InMemoryCache.make(undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, true, undefined, ApolloClient__ApolloClient.DefaultOptions.make(ApolloClient__ApolloClient.DefaultMutateOptions.make(undefined, undefined, true, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultQueryOptions.make(/* NetworkOnly */2, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultWatchQueryOptions.make(/* NetworkOnly */3, /* All */2, undefined, undefined), undefined), undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

export {
  graphqlEndpoint ,
  headers ,
  httpLink ,
  makeHttpLink ,
  wsLink ,
  terminatingLink ,
  makeClient ,
  
}
/* httpLink Not a pure module */
